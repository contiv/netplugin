// contivModelClient.go
// This file is auto generated by modelgen tool
// Do not edit this file manually

// package client provides contiv REST client implementation.
//
// Concepts and Terminology:
//
// Tenant :
// Tenants provides namespace isolation for networks. It is the toplevel object where networks
// and policies are defiend.
// A tenant can have many networks, each with its own subnet address, among other information.
// A user can create networks with arbtrary subnet addresses within a tenant namespace,
// possibly reusing subnet IP addresses in other tenants. This provides complete freedom to a
// tenant user to specify the network names and their subnets within a tenant.
//
// Network:
// Network is an IPv4 or IPv6 subnet that may be provided with a default gateway.
// For example, a network can map to a subnet 10.1.1.0/24 that has a default gateway of 10.1.1.1.
//
// Policies:
// A policy describes an operational behavior on a group of containers.
// The operational behavior can be enforcement, allocation, prioritation, traffic redirection,
// stats collection, or other action on the group on which the policy is applied. For example,
// an inbound security policy on a database tier can specify the allowed ports on the containers
// belonging to the group.
//
// EndpointGroups:
// Endpoint group (or an application group) identifies a policy domain for a container or a pod.
// The grouping is an arbitrary collection of containers that share a specific application domain,
// for example all production,frontend containers, or backup,long-running containers.
// This association is often done by specifying label in kubernetes pod spec
//
// contiv object model is shown here https://github.com/contiv/modelgen/blob/master/docs/contivModel.png
//
// Example:
//
//package main
//
//import (
//    "log"
//    "github.com/contiv/contivModel/client"
//)
//
//func main() {
//    cl, err := client.NewContivClient("localhost:9999")
//    if err != nil {
//        log.Fatal(err)
//    }
//
//    // Define a policy
//    policy := client.Policy{
//        TenantName: "tenant1",
//        PolicyName: "policy",
//    }
//
//    // Create policy
//    err = cl.PostPolicy(policy)
//    if err != nil {
//        log.Errorf("Policy Creation failed. Err: %v", err)
//    }
//}
package client

import (
	"bytes"
	"encoding/json"
	"errors"
	"io/ioutil"
	"net/http"
	"regexp"
	"strings"

	log "github.com/Sirupsen/logrus"
)

// Link is a one way relattion between two objects
type Link struct {
	ObjType string `json:"type,omitempty"`
	ObjKey  string `json:"key,omitempty"`
}

func (c *ContivClient) httpGet(url string, jdata interface{}) error {

	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return err
	}

	c.processCustomHeaders(req)

	r, err := c.httpClient.Do(req)
	if err != nil {
		return err
	}
	defer r.Body.Close()

	switch {
	case r.StatusCode == int(404):
		return errors.New("Page not found!")
	case r.StatusCode == int(403):
		return errors.New("Access denied!")
	case r.StatusCode == int(500):
		response, err := ioutil.ReadAll(r.Body)
		if err != nil {
			return err
		}

		return errors.New(string(response))

	case r.StatusCode != int(200):
		log.Debugf("GET Status '%s' status code %d \n", r.Status, r.StatusCode)
		return errors.New(r.Status)
	}

	response, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}

	if err := json.Unmarshal(response, jdata); err != nil {
		return err
	}

	return nil
}

func (c *ContivClient) httpDelete(url string) error {

	req, err := http.NewRequest("DELETE", url, nil)
	if err != nil {
		return err
	}

	c.processCustomHeaders(req)

	r, err := c.httpClient.Do(req)
	if err != nil {
		return err
	}
	defer r.Body.Close()

	// body, _ := ioutil.ReadAll(r.Body)

	switch {
	case r.StatusCode == int(404):
		// return errors.New("Page not found!")
		return nil
	case r.StatusCode == int(403):
		return errors.New("Access denied!")
	case r.StatusCode == int(500):
		response, err := ioutil.ReadAll(r.Body)
		if err != nil {
			return err
		}

		return errors.New(string(response))

	case r.StatusCode != int(200):
		log.Debugf("DELETE Status '%s' status code %d \n", r.Status, r.StatusCode)
		return errors.New(r.Status)
	}

	return nil
}

func (c *ContivClient) httpPost(url string, jdata interface{}) error {
	buf, err := json.Marshal(jdata)
	if err != nil {
		return err
	}

	body := bytes.NewBuffer(buf)

	req, err := http.NewRequest("POST", url, body)
	if err != nil {
		return err
	}

	c.processCustomHeaders(req)

	r, err := c.httpClient.Do(req)
	if err != nil {
		return err
	}
	defer r.Body.Close()

	switch {
	case r.StatusCode == int(404):
		return errors.New("Page not found!")
	case r.StatusCode == int(403):
		return errors.New("Access denied!")
	case r.StatusCode == int(500):
		response, err := ioutil.ReadAll(r.Body)
		if err != nil {
			return err
		}

		return errors.New(string(response))

	case r.StatusCode != int(200):
		log.Debugf("POST Status '%s' status code %d \n", r.Status, r.StatusCode)
		return errors.New(r.Status)
	}

	response, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return err
	}
	log.Debugf(string(response))

	return nil
}

// ContivClient has the contiv model client instance
type ContivClient struct {
	// URL of netmaster (http) or auth_proxy (https)
	baseURL string

	// these pairs will be added as HTTP request headers before any request
	// is sent by this client. (each pair = one "Name: value" header).
	// names stored in this list will be lowercase but later canonicalized
	// internally by Go when the request headers are added.
	customRequestHeaders [][2]string

	// even if not later overriden by SetHttpClient(), having a per-client
	// http.Client means each client has its own dedicated pool of TCP
	// keepalive connections for the target netmaster/auth_proxy.
	httpClient *http.Client
}

// NewContivClient creates a new client instance
func NewContivClient(baseURL string) (*ContivClient, error) {
	ok, err := regexp.Match(`^https?://`, []byte(baseURL))
	if !ok {
		return nil, errors.New("invalid URL: must begin with http:// or https://")
	} else if err != nil {
		return nil, err
	}

	client := ContivClient{
		baseURL:              baseURL,
		customRequestHeaders: [][2]string{},
		httpClient:           &http.Client{},
	}

	return &client, nil
}

// SetHTTPClient replaces the internal *http.Client with a custom http client.
// This can be used to disable cert checking, set timeouts, and so on.
func (c *ContivClient) SetHTTPClient(newClient *http.Client) error {
	if newClient == nil {
		return errors.New("new http client cannot be nil")
	}

	c.httpClient = newClient

	return nil
}

const authTokenHeader = "x-auth-token"

// SetAuthToken sets the token used to authenticate with auth_proxy
func (c *ContivClient) SetAuthToken(token string) error {

	// setting an auth token is only allowed on secure requests.
	// if we didn't enforce this, the client could potentially send auth
	// tokens in plain text across the network.
	if !c.isHTTPS() {
		return errors.New("setting auth token requires a https auth_proxy URL")
	}

	// having multiple auth token headers is confusing and makes no sense and
	// which one is actually used depends on the implementation of the server.
	// therefore, we will raise an error if there's already an auth token set.
	for _, pair := range c.customRequestHeaders {
		if pair[0] == authTokenHeader {
			return errors.New("an auth token has already been set")
		}
	}

	c.addCustomRequestHeader(authTokenHeader, token)

	return nil
}

func (c *ContivClient) isHTTPS() bool {
	return strings.HasPrefix(c.baseURL, "https://")
}

type loginPayload struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

// LoginPath is the path of auth_proxy's login endpoint
const LoginPath = "/api/v1/auth_proxy/login/"

// Login performs a login to auth_proxy and returns the response and body
func (c *ContivClient) Login(username, password string) (*http.Response, []byte, error) {

	// login is only allowed over a secure channel
	if !c.isHTTPS() {
		return nil, nil, errors.New("login requires a https auth_proxy URL")
	}

	url := c.baseURL + LoginPath

	// create the POST payload for login
	lp := loginPayload{
		Username: username,
		Password: password,
	}

	payload, err := json.Marshal(lp)
	if err != nil {
		return nil, nil, err
	}

	// send the login POST request
	resp, err := c.httpClient.Post(url, "application/json", bytes.NewBuffer(payload))
	if err != nil {
		return nil, nil, err
	}
	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, nil, err
	}

	return resp, body, nil
}

// addCustomRequestHeader records a custom request header to be added to all outgoing requests
func (c *ContivClient) addCustomRequestHeader(name, value string) {

	// lowercase the header name so we can easily check for duplicates in other places.
	// there can legitimately be many headers with the same name, but in some cases
	// (e.g., auth token) we want to enforce that there is only one.
	// Go internally canonicalizes them when we call Header.Add() anyways.
	name = strings.ToLower(name)

	c.customRequestHeaders = append(c.customRequestHeaders, [2]string{name, value})
}

// processCustomHeaders adds all custom request headers to the target request.
// this function is called before a GET, POST, or DELETE is sent by the client.
func (c *ContivClient) processCustomHeaders(req *http.Request) {
	for _, pair := range c.customRequestHeaders {
		req.Header.Add(pair[0], pair[1])
	}
}

// AciGw object
type AciGw struct {
	// every object has a key
	Key string `json:"key,omitempty"`

	EnforcePolicies     string `json:"enforcePolicies,omitempty"`     // Enforce security policy
	IncludeCommonTenant string `json:"includeCommonTenant,omitempty"` // Include common tenant when searching for objects
	Name                string `json:"name,omitempty"`                // name of this block(must be 'aciGw')
	NodeBindings        string `json:"nodeBindings,omitempty"`        // List of ACI complete nodes to be bound
	PathBindings        string `json:"pathBindings,omitempty"`        // List of ACI fabric ports connected to cluster
	PhysicalDomain      string `json:"physicalDomain,omitempty"`      // Name of the physical domain

}

// AciGwOper runtime operations
type AciGwOper struct {
	NumAppProfiles int `json:"numAppProfiles,omitempty"` //

}

// AciGwInspect inspect information
type AciGwInspect struct {
	Config AciGw

	Oper AciGwOper
}

// AppProfile object
type AppProfile struct {
	// every object has a key
	Key string `json:"key,omitempty"`

	AppProfileName string   `json:"appProfileName,omitempty"` // Application Profile Name
	EndpointGroups []string `json:"endpointGroups,omitempty"`
	TenantName     string   `json:"tenantName,omitempty"` // Tenant Name

	// add link-sets and links
	LinkSets AppProfileLinkSets `json:"link-sets,omitempty"`
	Links    AppProfileLinks    `json:"links,omitempty"`
}

// AppProfileLinkSets list of internal links
type AppProfileLinkSets struct {
	EndpointGroups map[string]Link `json:"EndpointGroups,omitempty"`
}

// AppProfileLinks internal links to other object
type AppProfileLinks struct {
	Tenant Link `json:"Tenant,omitempty"`
}

// AppProfileInspect inspect information
type AppProfileInspect struct {
	Config AppProfile
}

// Bgp object
type Bgp struct {
	// every object has a key
	Key string `json:"key,omitempty"`

	As         string `json:"as,omitempty"`          // AS id
	Hostname   string `json:"hostname,omitempty"`    // host name
	Neighbor   string `json:"neighbor,omitempty"`    // Bgp  neighbor
	NeighborAs string `json:"neighbor-as,omitempty"` // AS id
	Routerip   string `json:"routerip,omitempty"`    // Bgp router intf ip

}

// BgpOper runtime operations
type BgpOper struct {
	AdminStatus    string   `json:"adminStatus,omitempty"`    // admin status
	NeighborStatus string   `json:"neighborStatus,omitempty"` // neighbor status
	NumRoutes      int      `json:"numRoutes,omitempty"`      // number of routes
	Routes         []string `json:"routes,omitempty"`
}

// BgpInspect inspect information
type BgpInspect struct {
	Config Bgp

	Oper BgpOper
}

// EndpointOper runtime operations
type EndpointOper struct {
	ContainerID      string   `json:"containerID,omitempty"`      //
	ContainerName    string   `json:"containerName,omitempty"`    //
	EndpointGroupID  int      `json:"endpointGroupId,omitempty"`  //
	EndpointGroupKey string   `json:"endpointGroupKey,omitempty"` //
	EndpointID       string   `json:"endpointID,omitempty"`       //
	HomingHost       string   `json:"homingHost,omitempty"`       //
	IntfName         string   `json:"intfName,omitempty"`         //
	IpAddress        []string `json:"ipAddress,omitempty"`
	Labels           string   `json:"labels,omitempty"`      //
	MacAddress       string   `json:"macAddress,omitempty"`  //
	Network          string   `json:"network,omitempty"`     //
	ServiceName      string   `json:"serviceName,omitempty"` //
	VirtualPort      string   `json:"virtualPort,omitempty"` //
	VtepIP           string   `json:"vtepIP,omitempty"`      //

}

// EndpointInspect inspect information
type EndpointInspect struct {
	Oper EndpointOper
}

// EndpointGroup object
type EndpointGroup struct {
	// every object has a key
	Key string `json:"key,omitempty"`

	CfgdTag          string   `json:"cfgdTag,omitempty"` // Configured Group Tag
	ExtContractsGrps []string `json:"extContractsGrps,omitempty"`
	GroupName        string   `json:"groupName,omitempty"`   // Group name
	IpPool           string   `json:"ipPool,omitempty"`      // IP-pool
	NetProfile       string   `json:"netProfile,omitempty"`  // Network profile name
	NetworkName      string   `json:"networkName,omitempty"` // Network
	Policies         []string `json:"policies,omitempty"`
	TenantName       string   `json:"tenantName,omitempty"` // Tenant

	// add link-sets and links
	LinkSets EndpointGroupLinkSets `json:"link-sets,omitempty"`
	Links    EndpointGroupLinks    `json:"links,omitempty"`
}

// EndpointGroupLinkSets list of internal links
type EndpointGroupLinkSets struct {
	ExtContractsGrps map[string]Link `json:"ExtContractsGrps,omitempty"`
	MatchRules       map[string]Link `json:"MatchRules,omitempty"`
	Policies         map[string]Link `json:"Policies,omitempty"`
	Services         map[string]Link `json:"Services,omitempty"`
}

// EndpointGroupLinks internal links to other object
type EndpointGroupLinks struct {
	AppProfile Link `json:"AppProfile,omitempty"`
	NetProfile Link `json:"NetProfile,omitempty"`
	Network    Link `json:"Network,omitempty"`
	Tenant     Link `json:"Tenant,omitempty"`
}

// EndpointGroupOper runtime operations
type EndpointGroupOper struct {
	AllocatedIPAddresses string         `json:"allocatedIPAddresses,omitempty"` // allocated IP addresses
	AvailableIPAddresses string         `json:"availableIPAddresses,omitempty"` // Available IP addresses
	Endpoints            []EndpointOper `json:"endpoints,omitempty"`
	ExternalPktTag       int            `json:"externalPktTag,omitempty"` // external packet tag
	GroupTag             string         `json:"groupTag,omitempty"`       // Derived EndpointGroup Tag
	NumEndpoints         int            `json:"numEndpoints,omitempty"`   // number of endpoints
	PktTag               int            `json:"pktTag,omitempty"`         // internal packet tag

}

// EndpointGroupInspect inspect information
type EndpointGroupInspect struct {
	Config EndpointGroup

	Oper EndpointGroupOper
}

// ExtContractsGroup object
type ExtContractsGroup struct {
	// every object has a key
	Key string `json:"key,omitempty"`

	Contracts          []string `json:"contracts,omitempty"`
	ContractsGroupName string   `json:"contractsGroupName,omitempty"` // Contracts group name
	ContractsType      string   `json:"contractsType,omitempty"`      // Contracts type
	TenantName         string   `json:"tenantName,omitempty"`         // Tenant name

	// add link-sets and links
	LinkSets ExtContractsGroupLinkSets `json:"link-sets,omitempty"`
}

// ExtContractsGroupLinkSets list of internal links
type ExtContractsGroupLinkSets struct {
	EndpointGroups map[string]Link `json:"EndpointGroups,omitempty"`
}

// ExtContractsGroupInspect inspect information
type ExtContractsGroupInspect struct {
	Config ExtContractsGroup
}

// Global object
type Global struct {
	// every object has a key
	Key string `json:"key,omitempty"`

	ArpMode          string `json:"arpMode,omitempty"`          // ARP Mode
	FwdMode          string `json:"fwdMode,omitempty"`          // Forwarding Mode
	Name             string `json:"name,omitempty"`             // name of this block(must be 'global')
	NetworkInfraType string `json:"networkInfraType,omitempty"` // Network infrastructure type
	PvtSubnet        string `json:"pvtSubnet,omitempty"`        // Private Subnet used by host bridge
	Vlans            string `json:"vlans,omitempty"`            // Allowed vlan range
	Vxlans           string `json:"vxlans,omitempty"`           // Allwed vxlan range

}

// GlobalOper runtime operations
type GlobalOper struct {
	ClusterMode     string `json:"clusterMode,omitempty"`     //
	DefaultNetwork  string `json:"defaultNetwork,omitempty"`  //
	FreeVXLANsStart int    `json:"freeVXLANsStart,omitempty"` //
	NumNetworks     int    `json:"numNetworks,omitempty"`     //
	VlansInUse      string `json:"vlansInUse,omitempty"`      //
	VxlansInUse     string `json:"vxlansInUse,omitempty"`     //

}

// GlobalInspect inspect information
type GlobalInspect struct {
	Config Global

	Oper GlobalOper
}

// Netprofile object
type Netprofile struct {
	// every object has a key
	Key string `json:"key,omitempty"`

	DSCP        int    `json:"DSCP,omitempty"`        // DSCP
	Bandwidth   string `json:"bandwidth,omitempty"`   // Allocated bandwidth
	Burst       int    `json:"burst,omitempty"`       // burst size
	ProfileName string `json:"profileName,omitempty"` // Network profile name
	TenantName  string `json:"tenantName,omitempty"`  // Tenant name

	// add link-sets and links
	LinkSets NetprofileLinkSets `json:"link-sets,omitempty"`
	Links    NetprofileLinks    `json:"links,omitempty"`
}

// NetprofileLinkSets list of internal links
type NetprofileLinkSets struct {
	EndpointGroups map[string]Link `json:"EndpointGroups,omitempty"`
}

// NetprofileLinks internal links to other object
type NetprofileLinks struct {
	Tenant Link `json:"Tenant,omitempty"`
}

// NetprofileInspect inspect information
type NetprofileInspect struct {
	Config Netprofile
}

// Network object
type Network struct {
	// every object has a key
	Key string `json:"key,omitempty"`

	CfgdTag     string `json:"cfgdTag,omitempty"`     // Configured Network Tag
	Encap       string `json:"encap,omitempty"`       // Encapsulation
	Gateway     string `json:"gateway,omitempty"`     // Gateway
	Ipv6Gateway string `json:"ipv6Gateway,omitempty"` // IPv6Gateway
	Ipv6Subnet  string `json:"ipv6Subnet,omitempty"`  // IPv6Subnet
	NetworkName string `json:"networkName,omitempty"` // Network name
	NwType      string `json:"nwType,omitempty"`      // Network Type
	PktTag      int    `json:"pktTag,omitempty"`      // Vlan/Vxlan Tag
	Subnet      string `json:"subnet,omitempty"`      // Subnet
	TenantName  string `json:"tenantName,omitempty"`  // Tenant Name

	// add link-sets and links
	LinkSets NetworkLinkSets `json:"link-sets,omitempty"`
	Links    NetworkLinks    `json:"links,omitempty"`
}

// NetworkLinkSets list of internal links
type NetworkLinkSets struct {
	EndpointGroups map[string]Link `json:"EndpointGroups,omitempty"`
	Servicelbs     map[string]Link `json:"Servicelbs,omitempty"`
	Services       map[string]Link `json:"Services,omitempty"`
}

// NetworkLinks internal links to other object
type NetworkLinks struct {
	Tenant Link `json:"Tenant,omitempty"`
}

// NetworkOper runtime operations
type NetworkOper struct {
	AllocatedAddressesCount int            `json:"allocatedAddressesCount,omitempty"` // Vlan/Vxlan Tag
	AllocatedIPAddresses    string         `json:"allocatedIPAddresses,omitempty"`    // allocated IP addresses
	AvailableIPAddresses    string         `json:"availableIPAddresses,omitempty"`    // Available IP addresses
	Endpoints               []EndpointOper `json:"endpoints,omitempty"`
	ExternalPktTag          int            `json:"externalPktTag,omitempty"` // external packet tag
	NetworkTag              string         `json:"networkTag,omitempty"`     // Derived Network Tag
	NumEndpoints            int            `json:"numEndpoints,omitempty"`   // external packet tag
	PktTag                  int            `json:"pktTag,omitempty"`         // internal packet tag

}

// NetworkInspect inspect information
type NetworkInspect struct {
	Config Network

	Oper NetworkOper
}

// Policy object
type Policy struct {
	// every object has a key
	Key string `json:"key,omitempty"`

	PolicyName string `json:"policyName,omitempty"` // Policy Name
	TenantName string `json:"tenantName,omitempty"` // Tenant Name

	// add link-sets and links
	LinkSets PolicyLinkSets `json:"link-sets,omitempty"`
	Links    PolicyLinks    `json:"links,omitempty"`
}

// PolicyLinkSets list of internal links
type PolicyLinkSets struct {
	EndpointGroups map[string]Link `json:"EndpointGroups,omitempty"`
	Rules          map[string]Link `json:"Rules,omitempty"`
}

// PolicyLinks internal links to other object
type PolicyLinks struct {
	Tenant Link `json:"Tenant,omitempty"`
}

// PolicyOper runtime operations
type PolicyOper struct {
	Endpoints        []EndpointOper `json:"endpoints,omitempty"`
	NumEndpoints     int            `json:"numEndpoints,omitempty"`     // number of endpoints
	PolicyViolations int            `json:"policyViolations,omitempty"` // number of policyViolations

}

// PolicyInspect inspect information
type PolicyInspect struct {
	Config Policy

	Oper PolicyOper
}

// Rule object
type Rule struct {
	// every object has a key
	Key string `json:"key,omitempty"`

	Action            string `json:"action,omitempty"`            // Action
	Direction         string `json:"direction,omitempty"`         // Direction
	FromEndpointGroup string `json:"fromEndpointGroup,omitempty"` // From Endpoint Group
	FromIpAddress     string `json:"fromIpAddress,omitempty"`     // IP Address
	FromNetwork       string `json:"fromNetwork,omitempty"`       // From Network
	PolicyName        string `json:"policyName,omitempty"`        // Policy Name
	Port              int    `json:"port,omitempty"`              // Port No
	Priority          int    `json:"priority,omitempty"`          // Priority
	Protocol          string `json:"protocol,omitempty"`          // Protocol
	RuleID            string `json:"ruleId,omitempty"`            // Rule Id
	TenantName        string `json:"tenantName,omitempty"`        // Tenant Name
	ToEndpointGroup   string `json:"toEndpointGroup,omitempty"`   // To Endpoint Group
	ToIpAddress       string `json:"toIpAddress,omitempty"`       // IP Address
	ToNetwork         string `json:"toNetwork,omitempty"`         // To Network

	// add link-sets and links
	LinkSets RuleLinkSets `json:"link-sets,omitempty"`
	Links    RuleLinks    `json:"links,omitempty"`
}

// RuleLinkSets list of internal links
type RuleLinkSets struct {
	Policies map[string]Link `json:"Policies,omitempty"`
}

// RuleLinks internal links to other object
type RuleLinks struct {
	MatchEndpointGroup Link `json:"MatchEndpointGroup,omitempty"`
}

// RuleInspect inspect information
type RuleInspect struct {
	Config Rule
}

// ServiceLB object
type ServiceLB struct {
	// every object has a key
	Key string `json:"key,omitempty"`

	IpAddress   string   `json:"ipAddress,omitempty"`   // Service ip
	NetworkName string   `json:"networkName,omitempty"` // Service network name
	Ports       []string `json:"ports,omitempty"`
	Selectors   []string `json:"selectors,omitempty"`
	ServiceName string   `json:"serviceName,omitempty"` // service name
	TenantName  string   `json:"tenantName,omitempty"`  // Tenant Name

	Links ServiceLBLinks `json:"links,omitempty"`
}

// ServiceLBLinks internal links to other object
type ServiceLBLinks struct {
	Network Link `json:"Network,omitempty"`
	Tenant  Link `json:"Tenant,omitempty"`
}

// ServiceLBOper runtime operations
type ServiceLBOper struct {
	NumProviders int            `json:"numProviders,omitempty"` //  number of provider endpoints for the service
	Providers    []EndpointOper `json:"providers,omitempty"`
	ServiceVip   string         `json:"serviceVip,omitempty"` // allocated IP addresses

}

// ServiceLBInspect inspect information
type ServiceLBInspect struct {
	Config ServiceLB

	Oper ServiceLBOper
}

// Tenant object
type Tenant struct {
	// every object has a key
	Key string `json:"key,omitempty"`

	DefaultNetwork string `json:"defaultNetwork,omitempty"` // Network name
	TenantName     string `json:"tenantName,omitempty"`     // Tenant Name

	// add link-sets and links
	LinkSets TenantLinkSets `json:"link-sets,omitempty"`
}

// TenantLinkSets list of internal links
type TenantLinkSets struct {
	AppProfiles    map[string]Link `json:"AppProfiles,omitempty"`
	EndpointGroups map[string]Link `json:"EndpointGroups,omitempty"`
	NetProfiles    map[string]Link `json:"NetProfiles,omitempty"`
	Networks       map[string]Link `json:"Networks,omitempty"`
	Policies       map[string]Link `json:"Policies,omitempty"`
	Servicelbs     map[string]Link `json:"Servicelbs,omitempty"`
	VolumeProfiles map[string]Link `json:"VolumeProfiles,omitempty"`
	Volumes        map[string]Link `json:"Volumes,omitempty"`
}

// TenantOper runtime operations
type TenantOper struct {
	EndpointGroups   []EndpointGroupOper `json:"endpointGroups,omitempty"`
	Endpoints        []EndpointOper      `json:"endpoints,omitempty"`
	Networks         []NetworkOper       `json:"networks,omitempty"`
	Policies         []PolicyOper        `json:"policies,omitempty"`
	Servicelbs       []ServiceLBOper     `json:"servicelbs,omitempty"`
	TotalAppProfiles int                 `json:"totalAppProfiles,omitempty"` // total number of App-Profiles
	TotalEPGs        int                 `json:"totalEPGs,omitempty"`        // total number of EPGs
	TotalEndpoints   int                 `json:"totalEndpoints,omitempty"`   // total number of endpoints in the tenant
	TotalNetprofiles int                 `json:"totalNetprofiles,omitempty"` // total number of Netprofiles
	TotalNetworks    int                 `json:"totalNetworks,omitempty"`    // total number of networks
	TotalPolicies    int                 `json:"totalPolicies,omitempty"`    // total number of totalPolicies
	TotalServicelbs  int                 `json:"totalServicelbs,omitempty"`  // total number of Servicelbs

}

// TenantInspect inspect information
type TenantInspect struct {
	Config Tenant

	Oper TenantOper
}

// Volume object
type Volume struct {
	// every object has a key
	Key string `json:"key,omitempty"`

	DatastoreType string `json:"datastoreType,omitempty"` //
	MountPoint    string `json:"mountPoint,omitempty"`    //
	PoolName      string `json:"poolName,omitempty"`      //
	Size          string `json:"size,omitempty"`          //
	TenantName    string `json:"tenantName,omitempty"`    // Tenant Name
	VolumeName    string `json:"volumeName,omitempty"`    // Volume Name

	// add link-sets and links
	LinkSets VolumeLinkSets `json:"link-sets,omitempty"`
	Links    VolumeLinks    `json:"links,omitempty"`
}

// VolumeLinkSets list of internal links
type VolumeLinkSets struct {
	ServiceInstances map[string]Link `json:"ServiceInstances,omitempty"`
}

// VolumeLinks internal links to other object
type VolumeLinks struct {
	Tenant Link `json:"Tenant,omitempty"`
}

// VolumeInspect inspect information
type VolumeInspect struct {
	Config Volume
}

// VolumeProfile object
type VolumeProfile struct {
	// every object has a key
	Key string `json:"key,omitempty"`

	DatastoreType     string `json:"datastoreType,omitempty"`     //
	MountPoint        string `json:"mountPoint,omitempty"`        //
	PoolName          string `json:"poolName,omitempty"`          //
	Size              string `json:"size,omitempty"`              //
	TenantName        string `json:"tenantName,omitempty"`        // Tenant Name
	VolumeProfileName string `json:"volumeProfileName,omitempty"` // Volume profile Name

	// add link-sets and links
	LinkSets VolumeProfileLinkSets `json:"link-sets,omitempty"`
	Links    VolumeProfileLinks    `json:"links,omitempty"`
}

// VolumeProfileLinkSets list of internal links
type VolumeProfileLinkSets struct {
	Services map[string]Link `json:"Services,omitempty"`
}

// VolumeProfileLinks internal links to other object
type VolumeProfileLinks struct {
	Tenant Link `json:"Tenant,omitempty"`
}

// VolumeProfileInspect inspect information
type VolumeProfileInspect struct {
	Config VolumeProfile
}

// AciGwPost posts the aciGw object
func (c *ContivClient) AciGwPost(obj *AciGw) error {
	// build key and URL
	keyStr := obj.Name
	url := c.baseURL + "/api/v1/aciGws/" + keyStr + "/"

	// http post the object
	err := c.httpPost(url, obj)
	if err != nil {
		log.Debugf("Error creating aciGw %+v. Err: %v", obj, err)
		return err
	}

	return nil
}

// AciGwList lists all aciGw objects
func (c *ContivClient) AciGwList() (*[]*AciGw, error) {
	// build key and URL
	url := c.baseURL + "/api/v1/aciGws/"

	// http get the object
	var objList []*AciGw
	err := c.httpGet(url, &objList)
	if err != nil {
		log.Debugf("Error getting aciGws. Err: %v", err)
		return nil, err
	}

	return &objList, nil
}

// AciGwGet gets the aciGw object
func (c *ContivClient) AciGwGet(name string) (*AciGw, error) {
	// build key and URL
	keyStr := name
	url := c.baseURL + "/api/v1/aciGws/" + keyStr + "/"

	// http get the object
	var obj AciGw
	err := c.httpGet(url, &obj)
	if err != nil {
		log.Debugf("Error getting aciGw %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// AciGwDelete deletes the aciGw object
func (c *ContivClient) AciGwDelete(name string) error {
	// build key and URL
	keyStr := name
	url := c.baseURL + "/api/v1/aciGws/" + keyStr + "/"

	// http get the object
	err := c.httpDelete(url)
	if err != nil {
		log.Debugf("Error deleting aciGw %s. Err: %v", keyStr, err)
		return err
	}

	return nil
}

// AciGwInspect gets the aciGwInspect object
func (c *ContivClient) AciGwInspect(name string) (*AciGwInspect, error) {
	// build key and URL
	keyStr := name
	url := c.baseURL + "/api/v1/inspect/aciGws/" + keyStr + "/"

	// http get the object
	var obj AciGwInspect
	err := c.httpGet(url, &obj)
	if err != nil {
		log.Debugf("Error getting aciGw %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// AppProfilePost posts the appProfile object
func (c *ContivClient) AppProfilePost(obj *AppProfile) error {
	// build key and URL
	keyStr := obj.TenantName + ":" + obj.AppProfileName
	url := c.baseURL + "/api/v1/appProfiles/" + keyStr + "/"

	// http post the object
	err := c.httpPost(url, obj)
	if err != nil {
		log.Debugf("Error creating appProfile %+v. Err: %v", obj, err)
		return err
	}

	return nil
}

// AppProfileList lists all appProfile objects
func (c *ContivClient) AppProfileList() (*[]*AppProfile, error) {
	// build key and URL
	url := c.baseURL + "/api/v1/appProfiles/"

	// http get the object
	var objList []*AppProfile
	err := c.httpGet(url, &objList)
	if err != nil {
		log.Debugf("Error getting appProfiles. Err: %v", err)
		return nil, err
	}

	return &objList, nil
}

// AppProfileGet gets the appProfile object
func (c *ContivClient) AppProfileGet(tenantName string, appProfileName string) (*AppProfile, error) {
	// build key and URL
	keyStr := tenantName + ":" + appProfileName
	url := c.baseURL + "/api/v1/appProfiles/" + keyStr + "/"

	// http get the object
	var obj AppProfile
	err := c.httpGet(url, &obj)
	if err != nil {
		log.Debugf("Error getting appProfile %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// AppProfileDelete deletes the appProfile object
func (c *ContivClient) AppProfileDelete(tenantName string, appProfileName string) error {
	// build key and URL
	keyStr := tenantName + ":" + appProfileName
	url := c.baseURL + "/api/v1/appProfiles/" + keyStr + "/"

	// http get the object
	err := c.httpDelete(url)
	if err != nil {
		log.Debugf("Error deleting appProfile %s. Err: %v", keyStr, err)
		return err
	}

	return nil
}

// AppProfileInspect gets the appProfileInspect object
func (c *ContivClient) AppProfileInspect(tenantName string, appProfileName string) (*AppProfileInspect, error) {
	// build key and URL
	keyStr := tenantName + ":" + appProfileName
	url := c.baseURL + "/api/v1/inspect/appProfiles/" + keyStr + "/"

	// http get the object
	var obj AppProfileInspect
	err := c.httpGet(url, &obj)
	if err != nil {
		log.Debugf("Error getting appProfile %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// BgpPost posts the Bgp object
func (c *ContivClient) BgpPost(obj *Bgp) error {
	// build key and URL
	keyStr := obj.Hostname
	url := c.baseURL + "/api/v1/Bgps/" + keyStr + "/"

	// http post the object
	err := c.httpPost(url, obj)
	if err != nil {
		log.Debugf("Error creating Bgp %+v. Err: %v", obj, err)
		return err
	}

	return nil
}

// BgpList lists all Bgp objects
func (c *ContivClient) BgpList() (*[]*Bgp, error) {
	// build key and URL
	url := c.baseURL + "/api/v1/Bgps/"

	// http get the object
	var objList []*Bgp
	err := c.httpGet(url, &objList)
	if err != nil {
		log.Debugf("Error getting Bgps. Err: %v", err)
		return nil, err
	}

	return &objList, nil
}

// BgpGet gets the Bgp object
func (c *ContivClient) BgpGet(hostname string) (*Bgp, error) {
	// build key and URL
	keyStr := hostname
	url := c.baseURL + "/api/v1/Bgps/" + keyStr + "/"

	// http get the object
	var obj Bgp
	err := c.httpGet(url, &obj)
	if err != nil {
		log.Debugf("Error getting Bgp %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// BgpDelete deletes the Bgp object
func (c *ContivClient) BgpDelete(hostname string) error {
	// build key and URL
	keyStr := hostname
	url := c.baseURL + "/api/v1/Bgps/" + keyStr + "/"

	// http get the object
	err := c.httpDelete(url)
	if err != nil {
		log.Debugf("Error deleting Bgp %s. Err: %v", keyStr, err)
		return err
	}

	return nil
}

// BgpInspect gets the BgpInspect object
func (c *ContivClient) BgpInspect(hostname string) (*BgpInspect, error) {
	// build key and URL
	keyStr := hostname
	url := c.baseURL + "/api/v1/inspect/Bgps/" + keyStr + "/"

	// http get the object
	var obj BgpInspect
	err := c.httpGet(url, &obj)
	if err != nil {
		log.Debugf("Error getting Bgp %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// EndpointInspect gets the endpointInspect object
func (c *ContivClient) EndpointInspect(endpointID string) (*EndpointInspect, error) {
	// build key and URL
	keyStr := endpointID
	url := c.baseURL + "/api/v1/inspect/endpoints/" + keyStr + "/"

	// http get the object
	var obj EndpointInspect
	err := c.httpGet(url, &obj)
	if err != nil {
		log.Debugf("Error getting endpoint %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// EndpointGroupPost posts the endpointGroup object
func (c *ContivClient) EndpointGroupPost(obj *EndpointGroup) error {
	// build key and URL
	keyStr := obj.TenantName + ":" + obj.GroupName
	url := c.baseURL + "/api/v1/endpointGroups/" + keyStr + "/"

	// http post the object
	err := c.httpPost(url, obj)
	if err != nil {
		log.Debugf("Error creating endpointGroup %+v. Err: %v", obj, err)
		return err
	}

	return nil
}

// EndpointGroupList lists all endpointGroup objects
func (c *ContivClient) EndpointGroupList() (*[]*EndpointGroup, error) {
	// build key and URL
	url := c.baseURL + "/api/v1/endpointGroups/"

	// http get the object
	var objList []*EndpointGroup
	err := c.httpGet(url, &objList)
	if err != nil {
		log.Debugf("Error getting endpointGroups. Err: %v", err)
		return nil, err
	}

	return &objList, nil
}

// EndpointGroupGet gets the endpointGroup object
func (c *ContivClient) EndpointGroupGet(tenantName string, groupName string) (*EndpointGroup, error) {
	// build key and URL
	keyStr := tenantName + ":" + groupName
	url := c.baseURL + "/api/v1/endpointGroups/" + keyStr + "/"

	// http get the object
	var obj EndpointGroup
	err := c.httpGet(url, &obj)
	if err != nil {
		log.Debugf("Error getting endpointGroup %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// EndpointGroupDelete deletes the endpointGroup object
func (c *ContivClient) EndpointGroupDelete(tenantName string, groupName string) error {
	// build key and URL
	keyStr := tenantName + ":" + groupName
	url := c.baseURL + "/api/v1/endpointGroups/" + keyStr + "/"

	// http get the object
	err := c.httpDelete(url)
	if err != nil {
		log.Debugf("Error deleting endpointGroup %s. Err: %v", keyStr, err)
		return err
	}

	return nil
}

// EndpointGroupInspect gets the endpointGroupInspect object
func (c *ContivClient) EndpointGroupInspect(tenantName string, groupName string) (*EndpointGroupInspect, error) {
	// build key and URL
	keyStr := tenantName + ":" + groupName
	url := c.baseURL + "/api/v1/inspect/endpointGroups/" + keyStr + "/"

	// http get the object
	var obj EndpointGroupInspect
	err := c.httpGet(url, &obj)
	if err != nil {
		log.Debugf("Error getting endpointGroup %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// ExtContractsGroupPost posts the extContractsGroup object
func (c *ContivClient) ExtContractsGroupPost(obj *ExtContractsGroup) error {
	// build key and URL
	keyStr := obj.TenantName + ":" + obj.ContractsGroupName
	url := c.baseURL + "/api/v1/extContractsGroups/" + keyStr + "/"

	// http post the object
	err := c.httpPost(url, obj)
	if err != nil {
		log.Debugf("Error creating extContractsGroup %+v. Err: %v", obj, err)
		return err
	}

	return nil
}

// ExtContractsGroupList lists all extContractsGroup objects
func (c *ContivClient) ExtContractsGroupList() (*[]*ExtContractsGroup, error) {
	// build key and URL
	url := c.baseURL + "/api/v1/extContractsGroups/"

	// http get the object
	var objList []*ExtContractsGroup
	err := c.httpGet(url, &objList)
	if err != nil {
		log.Debugf("Error getting extContractsGroups. Err: %v", err)
		return nil, err
	}

	return &objList, nil
}

// ExtContractsGroupGet gets the extContractsGroup object
func (c *ContivClient) ExtContractsGroupGet(tenantName string, contractsGroupName string) (*ExtContractsGroup, error) {
	// build key and URL
	keyStr := tenantName + ":" + contractsGroupName
	url := c.baseURL + "/api/v1/extContractsGroups/" + keyStr + "/"

	// http get the object
	var obj ExtContractsGroup
	err := c.httpGet(url, &obj)
	if err != nil {
		log.Debugf("Error getting extContractsGroup %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// ExtContractsGroupDelete deletes the extContractsGroup object
func (c *ContivClient) ExtContractsGroupDelete(tenantName string, contractsGroupName string) error {
	// build key and URL
	keyStr := tenantName + ":" + contractsGroupName
	url := c.baseURL + "/api/v1/extContractsGroups/" + keyStr + "/"

	// http get the object
	err := c.httpDelete(url)
	if err != nil {
		log.Debugf("Error deleting extContractsGroup %s. Err: %v", keyStr, err)
		return err
	}

	return nil
}

// ExtContractsGroupInspect gets the extContractsGroupInspect object
func (c *ContivClient) ExtContractsGroupInspect(tenantName string, contractsGroupName string) (*ExtContractsGroupInspect, error) {
	// build key and URL
	keyStr := tenantName + ":" + contractsGroupName
	url := c.baseURL + "/api/v1/inspect/extContractsGroups/" + keyStr + "/"

	// http get the object
	var obj ExtContractsGroupInspect
	err := c.httpGet(url, &obj)
	if err != nil {
		log.Debugf("Error getting extContractsGroup %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// GlobalPost posts the global object
func (c *ContivClient) GlobalPost(obj *Global) error {
	// build key and URL
	keyStr := obj.Name
	url := c.baseURL + "/api/v1/globals/" + keyStr + "/"

	// http post the object
	err := c.httpPost(url, obj)
	if err != nil {
		log.Debugf("Error creating global %+v. Err: %v", obj, err)
		return err
	}

	return nil
}

// GlobalList lists all global objects
func (c *ContivClient) GlobalList() (*[]*Global, error) {
	// build key and URL
	url := c.baseURL + "/api/v1/globals/"

	// http get the object
	var objList []*Global
	err := c.httpGet(url, &objList)
	if err != nil {
		log.Debugf("Error getting globals. Err: %v", err)
		return nil, err
	}

	return &objList, nil
}

// GlobalGet gets the global object
func (c *ContivClient) GlobalGet(name string) (*Global, error) {
	// build key and URL
	keyStr := name
	url := c.baseURL + "/api/v1/globals/" + keyStr + "/"

	// http get the object
	var obj Global
	err := c.httpGet(url, &obj)
	if err != nil {
		log.Debugf("Error getting global %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// GlobalDelete deletes the global object
func (c *ContivClient) GlobalDelete(name string) error {
	// build key and URL
	keyStr := name
	url := c.baseURL + "/api/v1/globals/" + keyStr + "/"

	// http get the object
	err := c.httpDelete(url)
	if err != nil {
		log.Debugf("Error deleting global %s. Err: %v", keyStr, err)
		return err
	}

	return nil
}

// GlobalInspect gets the globalInspect object
func (c *ContivClient) GlobalInspect(name string) (*GlobalInspect, error) {
	// build key and URL
	keyStr := name
	url := c.baseURL + "/api/v1/inspect/globals/" + keyStr + "/"

	// http get the object
	var obj GlobalInspect
	err := c.httpGet(url, &obj)
	if err != nil {
		log.Debugf("Error getting global %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// NetprofilePost posts the netprofile object
func (c *ContivClient) NetprofilePost(obj *Netprofile) error {
	// build key and URL
	keyStr := obj.TenantName + ":" + obj.ProfileName
	url := c.baseURL + "/api/v1/netprofiles/" + keyStr + "/"

	// http post the object
	err := c.httpPost(url, obj)
	if err != nil {
		log.Debugf("Error creating netprofile %+v. Err: %v", obj, err)
		return err
	}

	return nil
}

// NetprofileList lists all netprofile objects
func (c *ContivClient) NetprofileList() (*[]*Netprofile, error) {
	// build key and URL
	url := c.baseURL + "/api/v1/netprofiles/"

	// http get the object
	var objList []*Netprofile
	err := c.httpGet(url, &objList)
	if err != nil {
		log.Debugf("Error getting netprofiles. Err: %v", err)
		return nil, err
	}

	return &objList, nil
}

// NetprofileGet gets the netprofile object
func (c *ContivClient) NetprofileGet(tenantName string, profileName string) (*Netprofile, error) {
	// build key and URL
	keyStr := tenantName + ":" + profileName
	url := c.baseURL + "/api/v1/netprofiles/" + keyStr + "/"

	// http get the object
	var obj Netprofile
	err := c.httpGet(url, &obj)
	if err != nil {
		log.Debugf("Error getting netprofile %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// NetprofileDelete deletes the netprofile object
func (c *ContivClient) NetprofileDelete(tenantName string, profileName string) error {
	// build key and URL
	keyStr := tenantName + ":" + profileName
	url := c.baseURL + "/api/v1/netprofiles/" + keyStr + "/"

	// http get the object
	err := c.httpDelete(url)
	if err != nil {
		log.Debugf("Error deleting netprofile %s. Err: %v", keyStr, err)
		return err
	}

	return nil
}

// NetprofileInspect gets the netprofileInspect object
func (c *ContivClient) NetprofileInspect(tenantName string, profileName string) (*NetprofileInspect, error) {
	// build key and URL
	keyStr := tenantName + ":" + profileName
	url := c.baseURL + "/api/v1/inspect/netprofiles/" + keyStr + "/"

	// http get the object
	var obj NetprofileInspect
	err := c.httpGet(url, &obj)
	if err != nil {
		log.Debugf("Error getting netprofile %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// NetworkPost posts the network object
func (c *ContivClient) NetworkPost(obj *Network) error {
	// build key and URL
	keyStr := obj.TenantName + ":" + obj.NetworkName
	url := c.baseURL + "/api/v1/networks/" + keyStr + "/"

	// http post the object
	err := c.httpPost(url, obj)
	if err != nil {
		log.Debugf("Error creating network %+v. Err: %v", obj, err)
		return err
	}

	return nil
}

// NetworkList lists all network objects
func (c *ContivClient) NetworkList() (*[]*Network, error) {
	// build key and URL
	url := c.baseURL + "/api/v1/networks/"

	// http get the object
	var objList []*Network
	err := c.httpGet(url, &objList)
	if err != nil {
		log.Debugf("Error getting networks. Err: %v", err)
		return nil, err
	}

	return &objList, nil
}

// NetworkGet gets the network object
func (c *ContivClient) NetworkGet(tenantName string, networkName string) (*Network, error) {
	// build key and URL
	keyStr := tenantName + ":" + networkName
	url := c.baseURL + "/api/v1/networks/" + keyStr + "/"

	// http get the object
	var obj Network
	err := c.httpGet(url, &obj)
	if err != nil {
		log.Debugf("Error getting network %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// NetworkDelete deletes the network object
func (c *ContivClient) NetworkDelete(tenantName string, networkName string) error {
	// build key and URL
	keyStr := tenantName + ":" + networkName
	url := c.baseURL + "/api/v1/networks/" + keyStr + "/"

	// http get the object
	err := c.httpDelete(url)
	if err != nil {
		log.Debugf("Error deleting network %s. Err: %v", keyStr, err)
		return err
	}

	return nil
}

// NetworkInspect gets the networkInspect object
func (c *ContivClient) NetworkInspect(tenantName string, networkName string) (*NetworkInspect, error) {
	// build key and URL
	keyStr := tenantName + ":" + networkName
	url := c.baseURL + "/api/v1/inspect/networks/" + keyStr + "/"

	// http get the object
	var obj NetworkInspect
	err := c.httpGet(url, &obj)
	if err != nil {
		log.Debugf("Error getting network %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// PolicyPost posts the policy object
func (c *ContivClient) PolicyPost(obj *Policy) error {
	// build key and URL
	keyStr := obj.TenantName + ":" + obj.PolicyName
	url := c.baseURL + "/api/v1/policys/" + keyStr + "/"

	// http post the object
	err := c.httpPost(url, obj)
	if err != nil {
		log.Debugf("Error creating policy %+v. Err: %v", obj, err)
		return err
	}

	return nil
}

// PolicyList lists all policy objects
func (c *ContivClient) PolicyList() (*[]*Policy, error) {
	// build key and URL
	url := c.baseURL + "/api/v1/policys/"

	// http get the object
	var objList []*Policy
	err := c.httpGet(url, &objList)
	if err != nil {
		log.Debugf("Error getting policys. Err: %v", err)
		return nil, err
	}

	return &objList, nil
}

// PolicyGet gets the policy object
func (c *ContivClient) PolicyGet(tenantName string, policyName string) (*Policy, error) {
	// build key and URL
	keyStr := tenantName + ":" + policyName
	url := c.baseURL + "/api/v1/policys/" + keyStr + "/"

	// http get the object
	var obj Policy
	err := c.httpGet(url, &obj)
	if err != nil {
		log.Debugf("Error getting policy %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// PolicyDelete deletes the policy object
func (c *ContivClient) PolicyDelete(tenantName string, policyName string) error {
	// build key and URL
	keyStr := tenantName + ":" + policyName
	url := c.baseURL + "/api/v1/policys/" + keyStr + "/"

	// http get the object
	err := c.httpDelete(url)
	if err != nil {
		log.Debugf("Error deleting policy %s. Err: %v", keyStr, err)
		return err
	}

	return nil
}

// PolicyInspect gets the policyInspect object
func (c *ContivClient) PolicyInspect(tenantName string, policyName string) (*PolicyInspect, error) {
	// build key and URL
	keyStr := tenantName + ":" + policyName
	url := c.baseURL + "/api/v1/inspect/policys/" + keyStr + "/"

	// http get the object
	var obj PolicyInspect
	err := c.httpGet(url, &obj)
	if err != nil {
		log.Debugf("Error getting policy %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// RulePost posts the rule object
func (c *ContivClient) RulePost(obj *Rule) error {
	// build key and URL
	keyStr := obj.TenantName + ":" + obj.PolicyName + ":" + obj.RuleID
	url := c.baseURL + "/api/v1/rules/" + keyStr + "/"

	// http post the object
	err := c.httpPost(url, obj)
	if err != nil {
		log.Debugf("Error creating rule %+v. Err: %v", obj, err)
		return err
	}

	return nil
}

// RuleList lists all rule objects
func (c *ContivClient) RuleList() (*[]*Rule, error) {
	// build key and URL
	url := c.baseURL + "/api/v1/rules/"

	// http get the object
	var objList []*Rule
	err := c.httpGet(url, &objList)
	if err != nil {
		log.Debugf("Error getting rules. Err: %v", err)
		return nil, err
	}

	return &objList, nil
}

// RuleGet gets the rule object
func (c *ContivClient) RuleGet(tenantName string, policyName string, ruleId string) (*Rule, error) {
	// build key and URL
	keyStr := tenantName + ":" + policyName + ":" + ruleId
	url := c.baseURL + "/api/v1/rules/" + keyStr + "/"

	// http get the object
	var obj Rule
	err := c.httpGet(url, &obj)
	if err != nil {
		log.Debugf("Error getting rule %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// RuleDelete deletes the rule object
func (c *ContivClient) RuleDelete(tenantName string, policyName string, ruleId string) error {
	// build key and URL
	keyStr := tenantName + ":" + policyName + ":" + ruleId
	url := c.baseURL + "/api/v1/rules/" + keyStr + "/"

	// http get the object
	err := c.httpDelete(url)
	if err != nil {
		log.Debugf("Error deleting rule %s. Err: %v", keyStr, err)
		return err
	}

	return nil
}

// RuleInspect gets the ruleInspect object
func (c *ContivClient) RuleInspect(tenantName string, policyName string, ruleId string) (*RuleInspect, error) {
	// build key and URL
	keyStr := tenantName + ":" + policyName + ":" + ruleId
	url := c.baseURL + "/api/v1/inspect/rules/" + keyStr + "/"

	// http get the object
	var obj RuleInspect
	err := c.httpGet(url, &obj)
	if err != nil {
		log.Debugf("Error getting rule %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// ServiceLBPost posts the serviceLB object
func (c *ContivClient) ServiceLBPost(obj *ServiceLB) error {
	// build key and URL
	keyStr := obj.TenantName + ":" + obj.ServiceName
	url := c.baseURL + "/api/v1/serviceLBs/" + keyStr + "/"

	// http post the object
	err := c.httpPost(url, obj)
	if err != nil {
		log.Debugf("Error creating serviceLB %+v. Err: %v", obj, err)
		return err
	}

	return nil
}

// ServiceLBList lists all serviceLB objects
func (c *ContivClient) ServiceLBList() (*[]*ServiceLB, error) {
	// build key and URL
	url := c.baseURL + "/api/v1/serviceLBs/"

	// http get the object
	var objList []*ServiceLB
	err := c.httpGet(url, &objList)
	if err != nil {
		log.Debugf("Error getting serviceLBs. Err: %v", err)
		return nil, err
	}

	return &objList, nil
}

// ServiceLBGet gets the serviceLB object
func (c *ContivClient) ServiceLBGet(tenantName string, serviceName string) (*ServiceLB, error) {
	// build key and URL
	keyStr := tenantName + ":" + serviceName
	url := c.baseURL + "/api/v1/serviceLBs/" + keyStr + "/"

	// http get the object
	var obj ServiceLB
	err := c.httpGet(url, &obj)
	if err != nil {
		log.Debugf("Error getting serviceLB %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// ServiceLBDelete deletes the serviceLB object
func (c *ContivClient) ServiceLBDelete(tenantName string, serviceName string) error {
	// build key and URL
	keyStr := tenantName + ":" + serviceName
	url := c.baseURL + "/api/v1/serviceLBs/" + keyStr + "/"

	// http get the object
	err := c.httpDelete(url)
	if err != nil {
		log.Debugf("Error deleting serviceLB %s. Err: %v", keyStr, err)
		return err
	}

	return nil
}

// ServiceLBInspect gets the serviceLBInspect object
func (c *ContivClient) ServiceLBInspect(tenantName string, serviceName string) (*ServiceLBInspect, error) {
	// build key and URL
	keyStr := tenantName + ":" + serviceName
	url := c.baseURL + "/api/v1/inspect/serviceLBs/" + keyStr + "/"

	// http get the object
	var obj ServiceLBInspect
	err := c.httpGet(url, &obj)
	if err != nil {
		log.Debugf("Error getting serviceLB %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// TenantPost posts the tenant object
func (c *ContivClient) TenantPost(obj *Tenant) error {
	// build key and URL
	keyStr := obj.TenantName
	url := c.baseURL + "/api/v1/tenants/" + keyStr + "/"

	// http post the object
	err := c.httpPost(url, obj)
	if err != nil {
		log.Debugf("Error creating tenant %+v. Err: %v", obj, err)
		return err
	}

	return nil
}

// TenantList lists all tenant objects
func (c *ContivClient) TenantList() (*[]*Tenant, error) {
	// build key and URL
	url := c.baseURL + "/api/v1/tenants/"

	// http get the object
	var objList []*Tenant
	err := c.httpGet(url, &objList)
	if err != nil {
		log.Debugf("Error getting tenants. Err: %v", err)
		return nil, err
	}

	return &objList, nil
}

// TenantGet gets the tenant object
func (c *ContivClient) TenantGet(tenantName string) (*Tenant, error) {
	// build key and URL
	keyStr := tenantName
	url := c.baseURL + "/api/v1/tenants/" + keyStr + "/"

	// http get the object
	var obj Tenant
	err := c.httpGet(url, &obj)
	if err != nil {
		log.Debugf("Error getting tenant %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// TenantDelete deletes the tenant object
func (c *ContivClient) TenantDelete(tenantName string) error {
	// build key and URL
	keyStr := tenantName
	url := c.baseURL + "/api/v1/tenants/" + keyStr + "/"

	// http get the object
	err := c.httpDelete(url)
	if err != nil {
		log.Debugf("Error deleting tenant %s. Err: %v", keyStr, err)
		return err
	}

	return nil
}

// TenantInspect gets the tenantInspect object
func (c *ContivClient) TenantInspect(tenantName string) (*TenantInspect, error) {
	// build key and URL
	keyStr := tenantName
	url := c.baseURL + "/api/v1/inspect/tenants/" + keyStr + "/"

	// http get the object
	var obj TenantInspect
	err := c.httpGet(url, &obj)
	if err != nil {
		log.Debugf("Error getting tenant %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// VolumePost posts the volume object
func (c *ContivClient) VolumePost(obj *Volume) error {
	// build key and URL
	keyStr := obj.TenantName + ":" + obj.VolumeName
	url := c.baseURL + "/api/v1/volumes/" + keyStr + "/"

	// http post the object
	err := c.httpPost(url, obj)
	if err != nil {
		log.Debugf("Error creating volume %+v. Err: %v", obj, err)
		return err
	}

	return nil
}

// VolumeList lists all volume objects
func (c *ContivClient) VolumeList() (*[]*Volume, error) {
	// build key and URL
	url := c.baseURL + "/api/v1/volumes/"

	// http get the object
	var objList []*Volume
	err := c.httpGet(url, &objList)
	if err != nil {
		log.Debugf("Error getting volumes. Err: %v", err)
		return nil, err
	}

	return &objList, nil
}

// VolumeGet gets the volume object
func (c *ContivClient) VolumeGet(tenantName string, volumeName string) (*Volume, error) {
	// build key and URL
	keyStr := tenantName + ":" + volumeName
	url := c.baseURL + "/api/v1/volumes/" + keyStr + "/"

	// http get the object
	var obj Volume
	err := c.httpGet(url, &obj)
	if err != nil {
		log.Debugf("Error getting volume %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// VolumeDelete deletes the volume object
func (c *ContivClient) VolumeDelete(tenantName string, volumeName string) error {
	// build key and URL
	keyStr := tenantName + ":" + volumeName
	url := c.baseURL + "/api/v1/volumes/" + keyStr + "/"

	// http get the object
	err := c.httpDelete(url)
	if err != nil {
		log.Debugf("Error deleting volume %s. Err: %v", keyStr, err)
		return err
	}

	return nil
}

// VolumeInspect gets the volumeInspect object
func (c *ContivClient) VolumeInspect(tenantName string, volumeName string) (*VolumeInspect, error) {
	// build key and URL
	keyStr := tenantName + ":" + volumeName
	url := c.baseURL + "/api/v1/inspect/volumes/" + keyStr + "/"

	// http get the object
	var obj VolumeInspect
	err := c.httpGet(url, &obj)
	if err != nil {
		log.Debugf("Error getting volume %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// VolumeProfilePost posts the volumeProfile object
func (c *ContivClient) VolumeProfilePost(obj *VolumeProfile) error {
	// build key and URL
	keyStr := obj.TenantName + ":" + obj.VolumeProfileName
	url := c.baseURL + "/api/v1/volumeProfiles/" + keyStr + "/"

	// http post the object
	err := c.httpPost(url, obj)
	if err != nil {
		log.Debugf("Error creating volumeProfile %+v. Err: %v", obj, err)
		return err
	}

	return nil
}

// VolumeProfileList lists all volumeProfile objects
func (c *ContivClient) VolumeProfileList() (*[]*VolumeProfile, error) {
	// build key and URL
	url := c.baseURL + "/api/v1/volumeProfiles/"

	// http get the object
	var objList []*VolumeProfile
	err := c.httpGet(url, &objList)
	if err != nil {
		log.Debugf("Error getting volumeProfiles. Err: %v", err)
		return nil, err
	}

	return &objList, nil
}

// VolumeProfileGet gets the volumeProfile object
func (c *ContivClient) VolumeProfileGet(tenantName string, volumeProfileName string) (*VolumeProfile, error) {
	// build key and URL
	keyStr := tenantName + ":" + volumeProfileName
	url := c.baseURL + "/api/v1/volumeProfiles/" + keyStr + "/"

	// http get the object
	var obj VolumeProfile
	err := c.httpGet(url, &obj)
	if err != nil {
		log.Debugf("Error getting volumeProfile %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}

// VolumeProfileDelete deletes the volumeProfile object
func (c *ContivClient) VolumeProfileDelete(tenantName string, volumeProfileName string) error {
	// build key and URL
	keyStr := tenantName + ":" + volumeProfileName
	url := c.baseURL + "/api/v1/volumeProfiles/" + keyStr + "/"

	// http get the object
	err := c.httpDelete(url)
	if err != nil {
		log.Debugf("Error deleting volumeProfile %s. Err: %v", keyStr, err)
		return err
	}

	return nil
}

// VolumeProfileInspect gets the volumeProfileInspect object
func (c *ContivClient) VolumeProfileInspect(tenantName string, volumeProfileName string) (*VolumeProfileInspect, error) {
	// build key and URL
	keyStr := tenantName + ":" + volumeProfileName
	url := c.baseURL + "/api/v1/inspect/volumeProfiles/" + keyStr + "/"

	// http get the object
	var obj VolumeProfileInspect
	err := c.httpGet(url, &obj)
	if err != nil {
		log.Debugf("Error getting volumeProfile %+v. Err: %v", keyStr, err)
		return nil, err
	}

	return &obj, nil
}
